/*
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] res = new int[nums.length];
        int[] record = nums.clone();
        Map <Integer, Integer> map = new HashMap<>();
        Arrays.sort(record);
        int flag = 0;
        for(int i = 0; i < nums.length; i ++){
            if(i == 0){
                map.put(record[i],flag);
                flag++;
            }
            else if(!map.containsKey(record[i])){
                map.put(record[i],flag);
                flag++;
            }
            else{
                flag++;
            }
            
        }
        for(int i = 0; i < nums.length; i++){
            res[i] = map.get(nums[i]);
        }
        return res;
    }
}
